<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/</id><title>「Coder」灰桑</title><updated>2020-06-29T13:09:37.580427+08:06</updated><author><name>linsyorozuya</name><email>linsyorozuya@yahoo.com</email></author><link href="/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><logo>https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/logo.png</logo><subtitle>图难于其易，于大为其细</subtitle><entry><id>/archives/实现 Smartisan OS 中首页的 PageControll 效果/</id><title>实现 Smartisan OS 中首页的 PageControll 效果</title><updated>2020-06-29T13:09:37.580777+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;在看 &lt;a href="http://kittenyang.com/pagecontrol/"&gt;&lt;code&gt;kittenyang:在iOS中实现Smartisan OS中首页的PageControll效果&lt;/code&gt;&lt;/a&gt; 和 &lt;a href="http://www.cnblogs.com/ludashi/p/4994520.html"&gt;&lt;code&gt;视错觉：从一个看似简单的自定义控件说起&lt;/code&gt;&lt;/a&gt; 这两篇文章感觉可以更好的实现实现 Smartisan OS 中首页的 PageControl 效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;锤子的效果：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 75.38461538461539" &gt;&lt;img width="294" height="195" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/4cb12df20f3aa413ff375ff8640f7a9f.gif" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先 kittenyang 实现的，当亮点划过两个暗点的中间是还是显示的&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 80.05319148936171" &gt;&lt;img width="301" height="188" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/7c62c3c797cc897b929bd28edad5d2f9.gif" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再看视错觉文章里的效果：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 28.181818181818183" &gt;&lt;img width="279" height="495" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/e239797e62ada73cf93b3aa124fb9614.gif" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终实现的效果：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 26.956521739130434" &gt;&lt;img width="372" height="690" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/6441c406e870d24f369ac1a0640b6249.gif" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5&gt;实现原理&lt;/h5&gt;
&lt;p&gt;首先从效果看锤子的亮点，像是从孔的下方移动。所以给人感觉是上面挖了一排孔，亮点在地道移动所以两个空中间的地方看不到移动的亮点。所以不能直接使用一个 view 移动来解决。&lt;/p&gt;
&lt;p&gt;恰巧看到另一篇文章，想到也许可以试试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理就是：使用 mask 隐藏和利用相对移动产生时差。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在自定义的 &lt;code&gt;LHPageControlview&lt;/code&gt; 上创建几个未选中状态颜色的圆 darkCircle。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在自定义的 &lt;code&gt;LHPageControlview&lt;/code&gt; 上创建一个圆大小的但透明的&lt;code&gt;_hightLightView&lt;/code&gt;，它的作用就是利用 &lt;code&gt;mask&lt;/code&gt; 属性将它子视图中超出 &lt;code&gt;_hightLightView&lt;/code&gt; 显示区域的其他高亮的几个圆藏起来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.&lt;code&gt;_hightLightView&lt;/code&gt; 上添加 &lt;code&gt;_topHidenHightLightCircles&lt;/code&gt; 视图，然后在 &lt;code&gt;_topHidenHightLightCircles&lt;/code&gt; 上面添加相应数量的选中状态的圆&lt;code&gt;lightCircle&lt;/code&gt;，注意他们的位置相对于 &lt;code&gt;LHPageControlview&lt;/code&gt; 上的 &lt;code&gt;darkCircle&lt;/code&gt;要一一对应。&lt;/p&gt;
&lt;p&gt;整个控件结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 55.348837209302324" &gt;&lt;img width="952" height="860" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/038b67a55ab229d521c1a9d16aaada81.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;移动的时候，移动 &lt;code&gt;_hightLightView&lt;/code&gt; 的同时 &lt;code&gt;_topHidenHightLightCircles&lt;/code&gt; 往相反方向移动同样距离，这样在视觉上就好像 &lt;code&gt;_topHidenHightLightCircles&lt;/code&gt; 是静止的，看上去只是 &lt;code&gt;_hightLightView&lt;/code&gt; 在移动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样当 &lt;code&gt;_hightLightView&lt;/code&gt; 移动到选中状态的圆 &lt;code&gt;lightCircle&lt;/code&gt; 时，相应的未选中状态的 &lt;code&gt;darkCircle&lt;/code&gt; 上就像有高亮的圆 &lt;code&gt;lightCircle&lt;/code&gt; 移动过来遮住并显示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;移动时如图：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 58.99470899470899" &gt;&lt;img width="446" height="378" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/b292297161f63b1badaae340db59995b.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;移动的关键代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CGFloat scale = distance - (int)distance;
if (scale == 0 &amp;amp;&amp;amp; distance&amp;gt;=1) {
    scale = 1;
}

CGFloat moveDistance = distance*(kPageHeight+5);

CGAffineTransform transform = CGAffineTransformIdentity;



transform = CGAffineTransformTranslate(transform, moveDistance, 0);


if (scale &amp;gt;= 0 &amp;amp;&amp;amp; scale &amp;lt;= 0.2) {
    transform = CGAffineTransformScale(transform, 1.0-scale, 1.0-scale);
}

if (scale &amp;gt; 0.2 &amp;amp;&amp;amp; scale &amp;lt; 0.8) {
    transform = CGAffineTransformScale(transform, 0.8, 0.8);
}

if (scale &amp;gt; 0.8 &amp;amp;&amp;amp; scale &amp;lt;= 1) {
    transform = CGAffineTransformScale(transform, scale, scale);
}


_hightLightView.layer.affineTransform = transform;




transform = CGAffineTransformIdentity;

transform = CGAffineTransformTranslate(transform, -moveDistance, 0);

_topHidenHightLightCircles.layer.affineTransform = transform;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就实现了基本效果。&lt;/p&gt;
&lt;p&gt;~我在中间为了实现缩小效果，使用实时改变 _hightLightView layer 的 cornerRadius 大小。如果慢慢拖动会发现中间是有些问题的。(希望指教有什么好的方法 =。= 谢过)~&lt;/p&gt;
&lt;p&gt;解决&lt;br&gt;
还是得自己解决。=。=。最近看到 &lt;code&gt;CGAffineTransform&lt;/code&gt; 这个类，可以直接根据自己的中心点来进行缩放和移动。省去了再去计算在父 view 的坐标去移动。&lt;/p&gt;
&lt;p&gt;Github 代码：&lt;a href="https://github.com/LinBling/LHPageControlTry"&gt;&lt;code&gt;传送门&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/实现 Smartisan OS 中首页的 PageControll 效果/" rel="alternate"/><published>2016-01-02T00:00:00+08:06</published></entry><entry><id>/archives/iOS 自定义控件适应内容大小问题/</id><title>iOS 自定义控件适应内容大小问题</title><updated>2020-06-29T13:09:37.580750+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;Why: 之前学习封装了下类似标签页的控件但是并不能根据内容大小来变化高度，看了别人的代码学习下自定义控件如何自适应内容大小。做个笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;相关链接：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zekunyan/TTGTagCollectionView"&gt;Github 上功能较全的项目： TTGTagCollectionView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于自动布局，最大的魅力在于它能随着内容的大小变化自动根据你的约束适应变化控件的大小，来达到显示的效果。所以自定义控件应该具备自适应大小的能力，才能适应更多的场景。最常见的场景就是 cell 上添加控件的时候。&lt;/p&gt;
&lt;h1&gt;How：&lt;/h1&gt;
&lt;p&gt;为此看了下  &lt;a href="https://github.com/zekunyan/TTGTagCollectionView"&gt;其他人开源项目： TTGTagCollectionView&lt;/a&gt; 学习下代码。看到自适应部分关键的代码在于一下几句话：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma mark - Layout

- (void)layoutSubviews {
    [super layoutSubviews];
    _collectionView.frame = self.bounds;
    if (!CGSizeEqualToSize(self.bounds.size, [self intrinsicContentSize])) {
        [self invalidateIntrinsicContentSize];
    }
}

- (CGSize)intrinsicContentSize {
    return _layout.collectionViewContentSize;
}

#pragma mark - Public methods

- (void)reload {
    [_collectionView reloadData];
    [self invalidateIntrinsicContentSize];
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关键的两个方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;invalidateIntrinsicContentSize&lt;/code&gt;  ：使视图原有的内容大小无效。手动调用这个方法后，会自动调用  &lt;code&gt;intrinsicContentSize&lt;/code&gt;  方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  使视图的内在内容大小无效。
  当您的自定义视图中的某些内容更改使其内在内容大小无效时，请调用此方法。 这允许基于约束的布局系统在其下一个布局遍中考虑新的内在内容大小。&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;intrinsicContentSize&lt;/code&gt; ：重新设置视图的内容大小。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  接收视图的自然大小，仅考虑视图本身的属性。
  自定义视图通常具有他们显示的布局系统不知道的内容。 设置此属性允许自定义视图与布局系统通信其想要基于其内容的大小。 该内在大小必须与内容框架无关，因为例如，没有办法基于改变的高度动态地将改变的宽度传送到布局系统。&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从文档上可以看出只要用这两个方法基本就可以完成自是以内容大小的功能。关键在于在什么时机调用这两个方法去更新视图内容的大小了。&lt;/p&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;值得一提&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在 storybored 或者 xib 中设置视图约束的时候，如果要设定高度变化的话，记得勾选相应的约束 remove at build time 这个选项来保证高度是可以变化的：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 59.72222222222222" &gt;&lt;img width="516" height="432" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/137b515a04215f1560b19264387a71d7.png" /&gt;&lt;figcaption&gt;Untitled Image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者在下图这个 Instrinsic Size 的属性里设置为 Placeholder，暂时给予视图一个占位的内容大小， 来避免 Xcode报错：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 43.88111888111888" &gt;&lt;img width="502" height="572" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/f00981195aaeb506950f09cd2232d7e1.png" /&gt;&lt;figcaption&gt;Untitled Image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;what&lt;/h1&gt;
&lt;p&gt;然后，修改了自己学习封装的类似标签页的控件的代码。让其具有自适应内容的大小：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 27.468581687612208" &gt;&lt;img width="306" height="557" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/8d9e24c78e88a38b8a7c192403256191.gif" /&gt;&lt;figcaption&gt;Untitled Image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/linsyorozuya/LHTagsViewDemo"&gt;Demo 项目地址&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/iOS 自定义控件适应内容大小问题/" rel="alternate"/><published>2016-11-08T00:00:00+08:06</published></entry><entry><id>/archives/iOS Widget - 便宜吗 开发问题记录/</id><title>iOS Widget - 便宜吗 开发问题记录</title><updated>2020-06-29T13:09:37.580723+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;p&gt;&lt;figure style="flex: 115.94202898550725" &gt;&lt;img width="480" height="207" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/842e151742401545fcebcb4a9cf219ce.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;WHY&lt;/h2&gt;
&lt;p&gt;很久很久以前…&lt;/p&gt;
&lt;p&gt;淘宝是有价格变化曲线的，利用曲线可以很大程度上防止商家的虚假促销。但是不知到出于什么原因后来取消了这个功能。&lt;/p&gt;
&lt;p&gt;庆幸的是浏览器上目前还有几款插件来显示历史价格，不幸的是手机上并没有。&lt;/p&gt;
&lt;p&gt;只发现一款叫 &lt;code&gt;比一比价&lt;/code&gt; 的 app 提供了这个功能（没有开发 widget），而且能查询大部分电商商品的价格曲线。&lt;/p&gt;
&lt;p&gt;虽然可以查询，但是这个 app 的搜索过程繁琐，要是想查询一个商品的价格，你需要四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制商品的衔接&lt;/li&gt;
&lt;li&gt;打开 app&lt;/li&gt;
&lt;li&gt;黏贴 链接&lt;/li&gt;
&lt;li&gt;点击搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可是我喜欢那种 Pin 和 TodayMind 那种无需打开 app 只需下拉通知栏就能使用的的快捷方式 @。@，所以我想要的步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制商品链接&lt;/li&gt;
&lt;li&gt;下拉通知栏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以来了兴趣想自己写个 widget, 也学习下了解下通知栏的开发~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（开发使用的是 &lt;code&gt;比一比价&lt;/code&gt; 手机端使用的查询接口。由于数据不全，也就没做显示价格曲线的功能了）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个 APP 叫&lt;code&gt;便宜吗&lt;/code&gt;，顺便也瞎弄了个图标~&lt;/p&gt;
&lt;p&gt;看使用效果：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 28.138528138528137" &gt;&lt;img width="260" height="462" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/caa79fa6370afa3313335584b07d5dcf.gif" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;官方文档关于 Today Extention 的篇幅不大。基本的要用的方法都讲到，然后再看看其他人的文章就可以开始入手了。（可以参考文章底部引用的两个链接地址。）&lt;/p&gt;
&lt;p&gt;便宜吗的功能实现上很简单，主要就三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取系统剪贴板上的链接：&lt;/li&gt;
&lt;li&gt;利用链接请求数据&lt;/li&gt;
&lt;li&gt;将数据显示到控件上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然还有一些细节处理，比如保存上次搜索的历史记录、如果地址相同显示上次搜索的数据等等。&lt;/p&gt;
&lt;p&gt;这里主要记录下开发中遇到的一些问题（基于 iOS 10）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高度问题&lt;/strong&gt;：iOS 10 后 widget 高度有两种模式：折叠和展开。&lt;br&gt;
折叠模式的最小高度是 110，但也是这种模式下的最大高度。对的，不能更改 @。@。&lt;br&gt;
展开模式有最大高度的限制，根据设备的不同最大高度也是不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置扩展模式需要添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];

    self.extensionContext.widgetLargestAvailableDisplayMode = NCWidgetDisplayModeExpanded;
}

#pragma mark - 切换展开和折叠的模式执行的方法
- (void)widgetActiveDisplayModeDidChange:(NCWidgetDisplayMode)activeDisplayMode withMaximumSize:(CGSize)maxSize
{
    if (activeDisplayMode == NCWidgetDisplayModeCompact) {
        self.preferredContentSize = maxSize;
    }else
    {

        self.preferredContentSize = CGSizeMake(maxSize.width, 300);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;背景色问题&lt;/strong&gt;：默认的 widget 本景色是一个有些毛玻璃效果的白色。你如果试图改变成其他颜色的话，目前我发现的一个问题是 widget 底部两个圆角，在下拉通知栏的时候都是直角，通知栏下拉完全后，会有个直角变成默认的圆角的突变。目前我的解决办法是添加圆角来处理（测试圆角为 15 ）。=。=&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- (void)addCornerRadius:(CGSize)radius
{

    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, _contentContainerView.bounds.size.width,_contentContainerView.bounds.size.height) byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:radius];
    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
    maskLayer.frame = _contentContainerView.bounds;
    maskLayer.path = maskPath.CGPath;
    _contentContainerView.layer.mask = maskLayer;
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据问题&lt;/strong&gt;：如果你想在 widget 中，添加一个全局变量来保存临时数据是不可行的。每次下拉通知栏后，所有数据都会清空。相当于每次下拉通知栏，所有的 widget 的生命周期又重新开始。收起通知栏所有 widget 生命周期结束。所以如果要保存上次的变量，可以用 NSUserDefaults 的方法来保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;widget 开发还是要看需求是否符合 widget 的使用场景。由于高度的限制，其实更能去思考开发的核心功能是什么。如何充分利用 110 的空间去做一些便捷实用的事情，也许才是开发 widget 开发真正思考的事情吧。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/linsyorozuya/IsRealCheap"&gt;代码地址 GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;额~：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;之前询问过 manmanbuy.com 能否使用相关接口，被否定后我建议他们做个相似的插件查询价格。后来真的做了并且已上线叫 历史价格查询。有这方面需求的可以去下载这个软件。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.jianshu.com/p/ca3e11d7686c"&gt;iOS 开发之 widget 实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/Today.html#//apple_ref/doc/uid/TP40014214-CH11-SW1"&gt;App Extension Programming Guide: Today&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><link href="/archives/iOS Widget - 便宜吗 开发问题记录/" rel="alternate"/><published>2017-01-09T00:00:00+08:06</published></entry><entry><id>/archives/记录「歌词派」/</id><title>记录「歌词派」</title><updated>2020-06-29T13:09:37.580695+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;终于个人的第二款 App 完成了，但是它却无法上架 App Store。从自己的需求出发而产生的产品，它最终只能服务于自己了。至少它还有我，所有至少写个文章记录下它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;UI 截图&lt;/h3&gt;
&lt;p&gt;这几张本来是「歌词派」的 App Store 上的截图。现在上不了 App Store 只能放这里看看咯。（这些应用截图是使用 &lt;a href="https://storescreens.com/?ref=producthunt"&gt;Store Screens&lt;/a&gt; 应用做的，简单易用十分推荐。）&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 66.66666666666667" &gt;&lt;img width="4800" height="3600" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/5a3e7526e58c4f6ab5d48adbd063d2ae.jpeg" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 66.66" &gt;&lt;img width="6666" height="5000" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/d018c017e636464a62f5535b87c2441f.JPG" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;视频&lt;/h3&gt;
&lt;iframe src="//player.bilibili.com/player.html?aid=370800767&amp;bvid=BV1UZ4y1p7ZM&amp;cid=195646550&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt;&lt;h3&gt;为何而生&lt;/h3&gt;
&lt;p&gt;因为我喜欢听歌和偶尔唱歌，但是我不爱记歌词。而且一般只记得住那些高潮部分的歌词。所以就想做一个搜索、收藏和分享歌词的一个应用。搜了 App Store 没找到符合这个功能的应用，所以就开始自己动手看看能不能做一个。都想好付费模式了。。（后来想想大家怎么都没做应该是审核过不了的关系吧 @。@）&lt;/p&gt;
&lt;h3&gt;创造过程&lt;/h3&gt;
&lt;p&gt;做自己的个人应用真的让我越来越体会到一个作为创造者的乐趣。「歌词派」总共的开发时间大概做了不到一个月吧。&lt;/p&gt;
&lt;p&gt;歌曲数据方面调研了挺久，一些歌词服务基本都是需要付费的。大部分大家都是抓的国内各大音乐产品的数据。因为我主要使用到歌词，所以对比了几家应用，还是 QQ 音乐的歌曲比较全。虽然有些歌不能听，但是你可以搜出来这些歌。&lt;/p&gt;
&lt;p&gt;技术上没有什么很复杂的难点，主要是第一次运用了 Cloudkit 来存取数据。基本了解了 Cloudkit 的开发，因为这个东西基本也只有个人开发者回去使用它。所以基本看文档和一些文章就够了。&lt;/p&gt;
&lt;p&gt;大部分时间基本是花在设计页面和一些小动画的调整上了。个人觉得用的挺舒服的，可惜也只能我自己用了。&lt;/p&gt;
&lt;h3&gt;为何不能上架&lt;/h3&gt;
&lt;p&gt;本来以为没有播放音乐，只是展示歌词的话版权方面应该没问题吧。结果歌词也是有版权的，审核马上就被拒绝了。&lt;/p&gt;
&lt;h3&gt;我还是很喜欢它&lt;/h3&gt;
&lt;p&gt;虽然不能上架，但是我自己还可以用呗。后面看看要不要删减点功能开源吧。最后分享一张从「歌词派」生成的分享的歌词吧&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 56.053811659192824" &gt;&lt;img width="750" height="669" src="https://cdn.jsdelivr.net/gh/linsyorozuya/Pics@master/uPic/IMG_2536.JPG" /&gt;&lt;figcaption&gt;憨人&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
</content><link href="/archives/记录「歌词派」/" rel="alternate"/><published>2019-08-12T00:00:00+08:06</published></entry><entry><id>/archives/禁止 Chrome 自动更新 (Mac)/</id><title>禁止 Chrome 自动更新 (Mac)</title><updated>2020-06-29T13:09:37.580668+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;自从把电脑的默认浏览器设置为 Chrome，Clean My Mac 就时不时弹出窗口提示更新程序没响应。再次记录方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://support.google.com/chrome/a/answer/7591084?hl=zh-Hans"&gt;谷歌官方方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这里拷贝一份&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;适用于 Chrome 浏览器以及通过 Google 软件更新管理的所有应用。

Chrome 浏览器会自动更新功能并应用安全更新，确保您的用户能及时获取重要的安全更新，并且不会错过新功能。

如果某个 Chrome 浏览器版本将会给您的单位造成问题，您可以停用自动更新功能，直至问题得到解决。如果贵单位希望手动推送 Chrome 浏览器更新，您也可以停用自动更新功能。

在您的首选 XML 编辑器中打开 com.google.Keystone.plist 文件。
com.google.Keystone.plist 文件地址在 /Library/LaunchAgents

在 updatePolicies 键下方，添加 Chrome 浏览器 UpdateDefault 键条目，并将键值设为 2。以下示例显示的是停用了自动更新功能的 Chrome 浏览器 (com.google.Chrome) 的设置：

&amp;lt;key&amp;gt;updatePolicies&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;global&amp;lt;/key&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;UpdateDefault&amp;lt;/key&amp;gt;
    &amp;lt;integer&amp;gt;2&amp;lt;/integer&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
保存更改。
此表显示了 UpdateDefault 键的所有有效设置。&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现没效果了，发现直接 CleanMyMac 里面禁用扩展好像生效了。。。。。。&lt;/p&gt;
</content><link href="/archives/禁止 Chrome 自动更新 (Mac)/" rel="alternate"/><published>2019-09-21T00:00:00+08:06</published></entry><entry><id>/archives/让 Xcode 的代码更好看/</id><title>让 Xcode 的代码更好看</title><updated>2020-06-29T13:09:37.580640+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;最近看了一篇 Xcode 编辑器字体颜色优化的文章 &lt;a href="https://medium.com/flawless-app-stories/one-stop-xcode-coziness-ee8dc9c1eb8b"&gt;One-Stop Xcode Coziness&lt;/a&gt;&lt;br&gt;
，感觉效果不错。在此记录记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这几年随着不断更新 Xcode 变得更加强大和易用，当然也被越来越多的开发者吐槽它的又胖又慢。但即便大家都在吐槽，但 Xcode 仍然是大部分 iOS 开发者的首选 IDE。&lt;/p&gt;
&lt;p&gt;作为一个天天低头不见抬头见的代码编辑器，代码的颜色和字体看起来舒不舒服和简洁明了是非常重要的。 Xcode 的主题就是解决这方面需求的功能。你可以自定义类名、函数名、常量等等类型的代码颜色，这样你可以轻松的区分代码的类型以便更好的调试。&lt;/p&gt;
&lt;p&gt;但是 Xcode 自带的主题一部分没有对相应类型的颜色加以区分，比如我喜欢的主题是 Sunset 这种淡黄色的主题就没有很好的区分一些类型的颜色。之前重装 Xcode 后，我都是直接选择 Sunset 主题，然后字体改为 15 号大小。如下图：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 71.10912343470483" &gt;&lt;img width="1590" height="1118" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/ca7c3baa126a6c2bad029815d839b519.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;优化方案&lt;/h3&gt;
&lt;p&gt;所谓的优化其实就是替换你觉得更好的字体和优化相关的代码类型颜色。当然除了这个还有上文说的我看的文章里提到的通过编程连字体优化 &lt;strong&gt;逻辑运算符&lt;/strong&gt;。这个我还是第一次知道，孤陋寡闻了。下图字体为 Fira Code 效果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 45.32374100719424" &gt;&lt;img width="1764" height="1946" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/912e227bf9128aa1c741dd13b60e2dff.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到想 &amp;gt;= 这种符号就变得很像我们手写的这种符号了。我觉的看起来非常直观，当然每个人感觉不一样。&lt;/p&gt;
&lt;p&gt;当然也有有很多编程连字字体，从 &lt;a href="https://github.com/tonsky/FiraCode"&gt;Fira Code&lt;/a&gt;， &lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt; 等免费字体到 &lt;a href="http://www.fsd.it/fonts/pragmatapro.htm"&gt;PragmataPro&lt;/a&gt; 等付费字体。你可以在 &lt;a href="https://github.com/ProgrammingFonts/ProgrammingFonts"&gt;ProgrammingFonts 上&lt;/a&gt; 浏览这些字体，也可以调整所需的字体，我觉得 Fira Code 挺好看的就使用 Fira Code 了。&lt;/p&gt;
&lt;p&gt;然后文章作者实现了一个代码颜色和连字字体的 Xcode 主题，&lt;strong&gt;Yolo-theme。&lt;/strong&gt; 你可以在他的 GitHub 上查看 &lt;a href="https://github.com/wendyliga/yolo-theme?source=post_page-----ee8dc9c1eb8b----------------------"&gt;Yolo-theme&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;放置主题文件地址&lt;/h3&gt;
&lt;p&gt;下载主题后将文件放入 &lt;code&gt;~/Library/Developer/Xcode/UserData/FontAndColorThemes&lt;/code&gt;, 然后重启 Xcode 在设置里选择主题即可。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 79.29883138564274" &gt;&lt;img width="1900" height="1198" src="https://cdn.jsdelivr.net/gh/linsyorozuya/i-code-log@gh-pages/archives/assets/2b9e8f99475e45326fa0cbbcce57ac8d.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
</content><link href="/archives/让 Xcode 的代码更好看/" rel="alternate"/><published>2019-10-02T00:00:00+08:06</published></entry><entry><id>/archives/Git 命令备忘/</id><title>Git 命令备忘</title><updated>2020-06-29T13:09:37.580612+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;笔记用于回顾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;查看当前文件状态&lt;/h3&gt;
&lt;p&gt;要查看哪些文件处于什么状态，可以用 &lt;code&gt;git status&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; 命令的输出十分详细，但其用语有些繁琐。 如果你使用 git status -s 命令或 git status --short 命令，你将得到一种更为紧凑的格式输出。&lt;/p&gt;
&lt;h3&gt;查看提交历史&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; 会按提交时间列出所有的更新。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log -p&lt;/code&gt;用来显示每次提交的内容差异。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log -p -2&lt;/code&gt;用来显示每次提交的内容差异，-2 显示最近两次提交。&lt;/p&gt;
&lt;h3&gt;创建新分支并切换&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout -b newBranch&lt;/code&gt; 创建一个新的叫 &lt;code&gt;newBranch&lt;/code&gt; 的分支，并切换到该分支。&lt;/p&gt;
&lt;h3&gt;创建嵌套目录&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mkdir -p a/b&lt;/code&gt; 创建嵌套的文件夹 a 和 b。&lt;/p&gt;
&lt;h3&gt;合并分支&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt; 在这个命令下，Git 会找到两个分支的共同祖先，将这三者进行一个三方合并。这种三方合并会产生一个新的提交，当前会指向这个新的提交。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; 则不采用三方合并，它会比较要「合并的分支」和「两个分支的共同祖先」这两个提交，将其中的修改提取成一个补丁。然后在「当前分支」的提交上应用这个补丁，从而生成一个新的「提交」。这种方式被叫做「rebase」，中文叫「变基」。&lt;/p&gt;
&lt;h3&gt;解决 Merge 冲突&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git merge --abort&lt;/code&gt; 可以恢复到 merge 之前的状态。&lt;/p&gt;
&lt;h3&gt;查看到所有关联到当前仓库的远程仓库&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;git remote&lt;/code&gt; 命令，我们可以查看到所有关联到当前仓库的远程仓库。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;git remote show&lt;/code&gt; 命令，我们可以查看某一个远程仓库的详细信息。&lt;/p&gt;
&lt;h3&gt;git stash&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; 这个命令可以将你当前进行到一半的工作保存到一个暂存区域，然后将当前目录回滚到上一次提交。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash apply&lt;/code&gt;把之前放到储藏区的最新的那个修改切回来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash list&lt;/code&gt;可以把所有放到储藏区的修改都列出来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash --list&lt;/code&gt; 查看&lt;code&gt;git stash&lt;/code&gt;命令列表。&lt;/p&gt;
</content><link href="/archives/Git 命令备忘/" rel="alternate"/><published>2020-01-26T00:00:00+08:06</published></entry><entry><id>/archives/命令行备忘/</id><title>命令行备忘</title><updated>2020-06-29T13:09:37.580581+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;用到一个记一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;创建文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;创建 helloword.txt 文件
touch helloword.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;创建 html 文件夹
mkdir html
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;展示文件内容&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;展示 helloword.txt 文件内容
cat helloword.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查看当前文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Finder 打开当前路径的文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;open .
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;移动文件和文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv file_to_move destination_directory
mv directory_to_move destination_directory
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;重命名文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv old_file_name new_file_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;拷贝文件和文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp file_to_copy new_file_name

拷贝文件夹需要加 -r 参数
cp -r directory_to_copy new_directory_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;删除文件和文件夹&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm file_name

删除文件夹需要加 -r 参数
rm -r directory_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;利用上一个命令的最后一个参数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/Desktop/html
&lt;span class="nb"&gt;cd&lt;/span&gt; !$ 执行此命令会自动生成命令 
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Desktop/html
&lt;/pre&gt;&lt;/div&gt;
</content><link href="/archives/命令行备忘/" rel="alternate"/><published>2020-02-01T00:00:00+08:06</published></entry><entry><id>/archives/在 Playground 中编译 SwiftUI/</id><title>在 Playground 中编译 SwiftUI</title><updated>2020-06-29T13:09:37.580546+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;记录下在 Playground 中编译 SwiftUI 的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;SwiftUI&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;PlaygroundSupport&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;VStack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tap me!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="n"&gt;tertiarySystemFill&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cornerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You&amp;#39;ve tapped &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt; times&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You&amp;#39;ve not yet tapped&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;PlaygroundPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLiveView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure  size-undefined&gt;&lt;img width="-1" height="-1" src="https://cdn.jsdelivr.net/gh/linsyorozuya/Pics@master/uPic/截屏2020-05-14%20上午11.43.34.png" /&gt;&lt;figcaption&gt;截屏2020-05-14 上午11.43.34&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
</content><link href="/archives/在 Playground 中编译 SwiftUI/" rel="alternate"/><published>2020-05-14T00:00:00+08:06</published></entry><entry><id>/archives/SwiftUI - 开发图片模糊的 MAC 小应用/</id><title>SwiftUI - 开发图片模糊的 MAC 小应用</title><updated>2020-06-29T13:09:37.580486+00:00</updated><author><name>灰桑</name><email>linsyorozuya@yahoo.com</email><uri>https://code.linsyorozuya.com</uri></author><content>&lt;blockquote&gt;&lt;p&gt;看完喵神的 《 SwiftUI 与 编程思想》，尝试使用了书中类 Redux 的架构写了给图片添加模糊和修改饱和度的 MAC 上的小应用。文章记录一些其中的要点，文章部分引用了书中的段落来记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🌠成果&lt;/h2&gt;
&lt;p&gt;&lt;figure style="flex: 72.19101123595506" &gt;&lt;img width="2056" height="1424" src="https://cdn.jsdelivr.net/gh/linsyorozuya/Pics@master/uPic/2020-05-25%2000-30-47.2020-05-25%2000_34_42.gif" /&gt;&lt;figcaption&gt;演示.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;应用功能很简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以拖动图片到应用中&lt;/li&gt;
&lt;li&gt;调节模糊程度&lt;/li&gt;
&lt;li&gt;调节饱和度&lt;/li&gt;
&lt;li&gt;拖动图片到其他软件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;架构&lt;/h2&gt;
&lt;p&gt;&lt;figure  size-undefined&gt;&lt;img width="-1" height="-1" src="https://cdn.jsdelivr.net/gh/linsyorozuya/Pics@master/uPic/截屏2020-05-25%20下午2.21.32.png" /&gt;&lt;figcaption&gt;图&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;数据流动方式的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将 app 当作一个状态机，状态决定用户界面。&lt;/li&gt;
&lt;li&gt;这些状态都保存在一个 Store 对象中。&lt;/li&gt;
&lt;li&gt;View 不能直接操作 State，而只能通过发送 Action 的方式，间接改变存储在 Store 中的 State。&lt;/li&gt;
&lt;li&gt;Reducer 接受原有的 State 和发送过来的 Action，生成新的 State 。并返回执行相关额外操作的副作用 Command。&lt;/li&gt;
&lt;li&gt;Store 接受并执行副作用 Command （网络操作、文件操作等与状态变更无关的操作）来继而发送新的 Action 再次触发 Reducer 返回新的 State。&lt;/li&gt;
&lt;li&gt;用新的 State 替换 Store 中原有的状态，并用新状态来驱动更新界面。&lt;/li&gt;
&lt;li&gt;使用 Binding 来完成界面和状态的双向绑定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用这种架构的优势将 View 中的状态操作完全解耦到了 Store 上去操作，所以对 State 的状态修改得以集中到了一个地方去处理。对项目的阅读和维护都有很好的帮助。避免了项目复杂之后散落各处的状态修改。&lt;/p&gt;
&lt;h3&gt;相关解释&lt;/h3&gt;
&lt;h4&gt;&lt;figure  size-undefined&gt;&lt;img width="-1" height="-1" src="https://cdn.jsdelivr.net/gh/linsyorozuya/Pics@master/uPic/截屏2020-05-25%20下午2.09.29.png" /&gt;&lt;figcaption&gt;文件结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Store&lt;/strong&gt;: 主要持有了 State 属性和一个接受和处理 Action 的 Reduce 函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObservableObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Published&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;appState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AppCommand&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;appState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;appCommond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppCommand&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;something&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="p"&gt;....&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;appCommond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cp"&gt;#if&lt;/span&gt; &lt;span class="cp"&gt;DEBUG&lt;/span&gt;
        &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Action: &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="cp"&gt;#endif&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;appState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;appState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cp"&gt;#if&lt;/span&gt; &lt;span class="cp"&gt;DEBUG&lt;/span&gt;
            &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AppCommand:&lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="cp"&gt;#endif&lt;/span&gt;

            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt;: 存放相关状态的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Action&lt;/strong&gt;：一个定义相关操作的枚举&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;AppAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt;：执行相关副作用操作的地方&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="nc"&gt;AppCommand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;WriteUserAppCommand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppCommand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;FileHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;documentDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;三种改变 State 的途径&lt;/h2&gt;
&lt;p&gt;更准确的应该是两种，Command 的方式最终也是通过 Action 来处理相关状态改变。&lt;/p&gt;
&lt;h3&gt;通过 Action 来改变 State&lt;/h3&gt;
&lt;p&gt;通过向 Store 发送并处理 Action 来直接修改或间接通过 Command 来修改相关状态。&lt;/p&gt;
&lt;h3&gt;通过 Binding 双向绑定改变 State&lt;/h3&gt;
&lt;p&gt;利用 SwiftUI 的双向绑定的特性，可以直接把 State 和 View 绑定起来。当 View 的状态改变直接修改了 Store 中的原始状态。&lt;/p&gt;
&lt;h3&gt;通过 Command 副作用来改变 State&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;“Reducer 的唯一职责应该是计算新的 State，而发送请求和接收响应，显然和返回新的 State 没什么关系，它们属于设置状态这一操作的“副作用”。在我们的架构中我们使用 Command 来代表“在设置状态的同时需要触发一些其他操作”这个语境。Reducer 在返回新的 State 的同时，还返回一个代表需要进行何种副作用的 Command 值 (对应上一段中的第一个时间点)。Store 在接收到这个 Command 后，开始进行额外操作，并在操作完成后发送一个新的 Action。这个 Action 中带有异步操作所获取到的数据。它将再次触发 Reducer 并返回新的 State，继而完成异步操作结束时的 UI 更新 。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Store 在接收到 Command 后，开始进行额外操作，并在操作完成后发送一个新的 Action。Action 再次触发 Reducer 并返回新的 State，继而完成 UI 更新 。&lt;/p&gt;
&lt;h2&gt;用绑定来更新的状态时通过 Publisher 来订阅并处理事件&lt;/h2&gt;
&lt;p&gt;对于通过 Action 改变的状态，如果我们想要执行网络请求这样的副作用，可以通过同时返回合适的 Command 完成。但是对于通过绑定来更新的状态，由于不会经过 Store 的 reducer 来处理状态并返回 Command，我们缺少一种有效的手段来在它们改变时执行副作用。&lt;/p&gt;
&lt;p&gt;在 SwiftUI 中可以使用 combine 来解决这个问题。最简单的方法是在属性前加上 @Published 来为相关属性创建 Publisher 。然后在合适的位置订阅相关事件来执行额外的操作。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;通过这个架构体验到了 SwiftUI 开发数据驱动页面更新的便利和优势，而且 SwiftUI 还能用来开发 Mac 端的应用。虽然目前 SwiftUI 还在开始不成熟的阶段，但是有理由相信以后 SwiftUI 统一苹果全平台的时候。期待下个月的 WWDC 的 SwiftUI。&lt;/p&gt;
</content><link href="/archives/SwiftUI - 开发图片模糊的 MAC 小应用/" rel="alternate"/><published>2020-05-23T00:00:00+08:06</published></entry></feed>